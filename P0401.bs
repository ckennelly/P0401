<pre class='metadata'>
Title: Providing size feedback in the Allocator interface
Status: D
Shortname: P0401
Group: WG21
Revision: 2
Editor: Jonathan Wakely, cxx@kayari.org
Editor: Chris Kennelly, Google, ckennelly@google.com
Date: 2020-01-12
Audience: LEWG
Audience: LWG
Abstract: Utilize size feedback from Allocator to reduce spurious reallocations
URL: http://wg21.link/P0401R2
Markup Shorthands: markdown yes
Default Highlight: C++
</pre>

# Introduction # {#intro}

This is a library paper to describe how size feedback can be used with allocators:
*   In the case of `std::allocator`, the language feature proposed in
    [[P0901R5]] could be used.
*   In the case of custom allocators, the availability of the traits  interface
    allows standard library containers to leverage this functionality.

# Motivation # {#motivation}

Consider code adding elements to `vector`:

<xmp>
std::vector<int> v = {1, 2, 3};
// Expected: v.capacity() == 3

// Add an additional element, triggering a reallocation.
v.push_back(4);
</xmp>

Many allocators only allocate in fixed-sized chunks of memory, rounding up
requests.  Our underlying heap allocator received a request for 12 bytes (`3 *
sizeof(int)`) while constructing `v`.  For several implementations, this request
is turned into a 16 byte region.

## Why not `realloc` ## {#reallocation}

`realloc` poses several problems problems:

*   We have unclear strategies for growing a container.  Consider the two
    options (`a` and `b`) outlined in the comments of the example below.
    Assume, as with the [[#motivation]] example, that there is a 16 byte size
    class for our underlying allocator.

    <xmp>
    std::vector<int> v = {1, 2, 3};
    // Expected: v.capacity() == 3

    // Add an additional element.  Does the vector:
    // a) realloc(sizeof(int) * 4), adding a single element
    // b) realloc(sizeof(int) * 6), attempt to double, needing reallocation
    v.push_back(4);

    // Add another element.
    // a) realloc(sizeof(int) * 5), fails in-place, requires reallocation
    // b) size + 1 <= capacity, no reallocation required
    v.push_back(5);
    </xmp>

    Option `a` requires every append (after the initial allocation) try to
    `realloc`, requiring an interaction with the allocator each time.

    Option `b` requires guesswork to probe the allocator's true size.  By
    doubling (the typical growth pattern for `std::vector` in libc++ and
    libstdc++), we skip past the existing allocation's size boundary.  While we
    can use a reduced growth rate, doing so requires more interactions with the
    allocator (calls to `realloc`), as well as copies (when we cannot resize
    in-place).

    Both of these options add extra branching on the control flow for growing
    the buffer.

*   When the allocator cannot resize the buffer in-place, it allocates new
    memory and `memcpy`'s the contents.  For non-trivially copyable types, this
    is disastrous.  The *language* lacks support for reallocating in-place
    *without* moving.  While this function could be implemented as magic
    library function, it could not interact with many underlying `malloc`
    implementations (libc, in the case of libc++ and libstdc++) used to build
    `operator new`, nor could it interact with user-provided replacement
    functions.

    In-place reallocation has been considered in [[N3495]] (throwing
    `std::bad_alloc` when unable) and [[P0894R1]] (returning `false` when
    unable).  This has sometimes been referred to as an "extend" or an "expand"
    interface.  Extending an existing allocation requires a round-trip to the
    allocator (and its requisite branch/call overheads) to determine whether
    the allocation *could* be expanded.  As discussed previously, we need to
    probe for the true size of the backing object (until we find extend fails)
    until we give up and apply a multiplicative expansion factor.

For fixed-size allocators it makes more sense, and is much simpler for
containers to adapt to, if the allocator is able to over-allocate on the
initial request and inform the caller how much memory was made available.

## Why not ask the allocator for the size ## {#size}

We could also explore APIs that answer the question: "If I ask for `N` bytes,
how many do I actually get?"  [[jemalloc]] calls this `nallocx`.

*   `nallocx` requires an extra call / size calculation.  This requires we
    duplicate work, as the size calculation is performed as part of allocation
    itself.
*   `nallocx` impairs telemetry for monitoring allocation request sizes.  If a
    `nallocx` return value is cached, the user appears to be asking for exactly
    as many bytes as `nallocx` said they would get.

See also [[P0901R5]]'s discussion "`nallocx`: not as awesome as it looks."

# Proposal # {#proposal}

Wording relative to [[N4800]].

We propose a free function to return the allocation size simultaneously with an
allocation.

<blockquote>

Amend [allocator.requirements]:

<ins>
<pre>
template&lt;typename T = void&gt;
struct sized_ptr_t {
  T *ptr;
  size_t n;
};

template&lt;typename T, typename Allocator = std::allocator&lt;T&gt;&gt;
sized_ptr_t&lt;T&gt; allocate_at_least(Allocator& a, size_t n);
</pre>
</ins>

<ul>
   <li><ins>*Effects:* Let `s` be the result of `allocate_at_least(a, n)`.
   Memory is allocated for at least `n` objects of type `T` but objects are not
   constructed.<ins></li>
   <li><ins>*Returns:* `sized_ptr_t{ptr, m}`, where `ptr` is that memory and
   `m` is the number of objects for which memory has been allocated, such that
   `m>=n`.</ins></li>
   <li><ins>[ *Note:* If `s.n == 0`, the value of `s.ptr` is unspecified. --
   end note]</ins></li>
</ul>

Table 34 - Cpp17Allocator Requirements

<table>
<tr>
<td>`a.deallocate(p,n)`</td>
<td>(not used)</td>
<td>*Requires*: `p` shall be a value returned by an earlier call to
`allocate`<ins> or `allocate_at_least`</ins> that has not been invalidated by
an intervening call to `deallocate`. <ins>If this memory was obtained by a call
to `allocate`,</ins> `n` shall match the value passed to `allocate` to obtain
this memory.  <ins>Otherwise, `n` shall satisfy `capacity >= n >= requested` where
`[p, capacity] = allocate_at_least(requested)` was used to obtain this memory.</ins>

*Throws*: Nothing.
</td>
<td></td>
</tr>
</table>
</blockquote>

# Design Considerations # {#design}

## `allocate` selection ## {#overloads}

There are multiple approaches here:

*   Return a pointer-size pair, as presented.
*   Overload `allocate` and return via a reference parameter.  This potentially
    hampers optimization depending on ABI, as the value is returned via memory
    rather than a register.

## `deallocate` changes ## {#deallocate}

We now require flexibility on the size we pass to `deallocate`.  For container
types using this allocator interface, they are faced with the choice of storing
*both* the original size request as well as the provided size (requiring
additional auxillary storage), or being unable to reproduce one during the call
to `deallocate`.

As the true size is expected to be useful for the `capacity` of a `string` or
`vector` instance, the returned size is available without additional storage
requirements.  The original (requested) size is unavailable, so we relax the
`deallocate` size parameter requirements for these allocations.

## Interaction with `polymorphic_allocator` ## {#pmr}

`std::pmr::memory_resource` is implemented using virtual functions.  Adding new
methods, such as the proposed allocate API would require taking an ABI break.

# Revision History # {#revisions}

## R1 &rarr; R2 ## {#R2}

Applied LEWG feedback from [[Cologne]].

<blockquote>
Poll: We want a feature like this.

<table>
<tr><th>SF</th><th>F</th><th>N</th><th>A</th><th>SA</th></tr>
<tr><td>2</td><td>9</td><td>2</td><td>0</td><td>0</td></tr>
</table>
</blockquote>

*   As users may specialize `std::allocator_traits`, this revision moves to a
    free function `std::allocate_at_least` as suggested via a LEWG poll.

<blockquote>
Poll: Name choice

<table>
<tr><td> 5</td><td>`allocate_with_size`</td></tr>
<tr><td> 4</td><td>`overallocate`</td></tr>
<tr><td> 2</td><td>`allocate_with_oversubscribe`</td></tr>
<tr><td> 6</td><td>`allocate_oversize`</td></tr>
<tr><td>14</td><td>`allocate_at_least`</td></tr>
</table>

Poll: Prefer a struct rather than a requirement of structured bindings.

<table>
<tr><th>SF</th><th>F</th><th>N</th><th>A</th><th>SA</th></tr>
<tr><td>2</td><td>8</td><td>0</td><td>2</td><td>1</td></tr>
</table>
</blockquote>

<pre class=biblio>
{
    "Cologne": {
        "href": "http://wiki.edg.com/bin/view/Wg21cologne2019/P0401",
	"date": "2019-07-17",
	"title": "Cologne Meeting Minutes"
    },
    "P0894R1": {
        "href": "http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0894r1.md",
	"date": "2019-01-18",
	"title": "realloc for C++"
    },
    "P0901R5": {
        "href": "http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0901r5.html",
	"date": "2019-10-03",
	"title": "Size feedback in operator new"
    },
    "N4800": {
        "href": "http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/n4800.pdf",
	"date": "2019-01-21",
	"title": "Working Draft, Standard for Programming Language C++"
    },
    "jemalloc": {
        "title": "jemalloc(3) - Linux man page",
        "href": "http://jemalloc.net/jemalloc.3.html"
    }
}
</pre>
